== Authentasaurus

Authentasaurus is a dynamic group/permission based authentication and authorization engine plugin, its simple to use and easy
to setup.

Most helpers are inspired by Devise.

== Installation

To start using Authentasaurus follow these simple steps :

1. install authentasaurus gem by running the following command
    gem install authentasaurus
2. add authentasaurus to your application environment; in config/environment.rb
    config.gem "authentasaurus"
3. generate authentasaurus configuration and tasks in your application
    script/generate authentasaurus
4. setup your migrations using the migration helpers
    in the migration up method just use
      authentasaurus_tables
    in the migration down method
      authentasaurus_drop_tables
5. migrate your database and setup your default data
    rake authentasaurus:setup_defaults
6. add your routes
    map.authentasaurus_routes :authorizable, :validatable, :invitable

that's the most basic and quick setup, you can now test your application by running script/server in your
project root directory and going to http://localhost:3000/sessions/sign-in

Authentasaurus is modular, you can install modules as you need them (the previous setup contains all modules), refer to the documentation for more
information.

== Under the hood

Authentasaurus takes advantage of rails' before_filter; it checks for the appropriate permissions before 
every action that requires a login, a write or read permission.

At login, authentasaurus would load the user's group permissions into a session hash and then attempts to read that hash
when it meets a require helper on a controller.

=== Authentasaurus uses the following terms:

<tt>Area</tt>:: 
  An area is in plain english the controller's name, so if you have a controller named "PostsController", the corresponding
  area name would be "posts" (just as you type it in the generator command)

<tt>Group</tt>::
  A group is as the name suggests, each group contains a number of users, and each user inherits the group permissions,
  also note that at any given time, the user can only belong to one group

<tt>Permission</tt>::
  A permission is one of two, either read or write, but take care, read or write is only a naming, and though it doesn't make
  sense, you could treat a read permission as a write permission and vice versa, but as i said it makes no sense !

== Generator options

You can use some options with the Authentasaurus generator; currently only one
is available:

<tt>--skip-validation</tt>::
  Skips generating the validation files used to send activation emails

== Session/Permissions Helpers

There are three main session helpers in Authentasaurus:

<tt>require_login</tt>::
  requires the user to login before accessing the actions specified

  <b>ex:</b> Tells Authentasaurus that the action destroy requires login and that
  Authentasaurus shouldn't store the request in the session
  (typically for logout actions)

  * :actions - actions that require the permission (list)
  * :skip_request - skips saving the original request (to redirect to after login)
  * :user_model - if defined, authentasaurus will use that model instead of the default "User"

    require_login :actions => :destroy, :skip_request => true

<tt>require_write</tt>::
  requires the user to have a write permission to that area to access the actions specified
    
  <b>ex:</b> Tells Authentasaurus that the actions create_user and delete_user
  requires login and write permission.
  
  * :actions - actions that require the permission (list)
  * :skip_request - skips saving the original request (to redirect to after login)
  * :user_model - if defined, authentasaurus will use that model instead of the default "User"

    require_write :actions => [:create_user, :delete_user]

<tt>require_read</tt>::
  requires the user to have a read permission to that area to access the actions specified
    
  <b>ex:</b> Tells Authentasaurus that the action show_user requires login and read
  permission. 
  
  * :actions - actions that require the permission (list)
  * :skip_request - skips saving the original request (to redirect to after login)
  * :user_model - if defined, authentasaurus will use that model instead of the default "User"

    require_read :actions => :show_user



Copyright (c) 2010 Mash, Ltd., released under the MIT license
